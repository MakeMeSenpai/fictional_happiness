{"version":3,"sources":["Components/Title/Title.js","Components/Home/Home.js","Components/Game/Game.js","Components/Footer/Footer.js","Components/App.js","serviceWorker.js","index.js"],"names":["Title","className","Home","to","lable","src","process","width","height","alt","href","target","rel","Game","leftId","Math","floor","random","rightId","leftChoice","rightChoice","Footer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qWAiBeA,MAZf,WACI,OACE,yBAAKC,UAAU,cACb,gCACE,sDACA,wBAAIA,UAAU,SAAd,uBACA,wBAAIA,UAAU,kBAAd,iD,MCSKC,MAdf,WACI,OACI,yBAAKD,UAAU,aACX,uFACA,kBAAC,IAAD,CAAMA,UAAU,IAAIE,GAAE,QAAWC,MAAM,QACnC,yBAAKH,UAAU,OAAOI,IAAG,UAAKC,uBAAL,gBAA2CC,MAAM,MAAMC,OAAO,MAAMC,IAAI,mBAErG,iFAAsD,uBAAGC,KAAK,kCAAkCC,OAAO,SAASC,IAAI,uBAA9D,yBAAtD,8EAC2E,uBAAGX,UAAU,QAAb,cAD3E,sGAEkC,uBAAGS,KAAK,mCAAmCC,OAAO,SAASC,IAAI,uBAA/D,a,MC2B/BC,MAlCf,WAEI,IAAIC,EAASC,KAAKC,MAAqB,GAAfD,KAAKE,UACzBC,EAAUH,KAAKC,MAAsB,GAAhBD,KAAKE,UAI1BE,EAAa,GACbC,EAAc,GASlB,OAXiBL,KAAKE,UAGJ,IACdE,EAAa,OACbC,EAAc,SAEdD,EAAa,OACbC,EAAc,QAId,yBAAKnB,UAAU,WAEV,yBAAKI,IAAG,UAAKC,uBAAL,iBAAoCQ,GAApC,OAA6CK,EAA7C,QAA+DZ,MAAM,MAAME,IAAKK,IAExF,yBAAKb,UAAU,UACX,+CACA,yCAGA,8CAEJ,yBAAKI,IAAG,UAAKC,uBAAL,iBAAoCY,GAApC,OAA8CE,EAA9C,QAAiEb,MAAM,MAAME,IAAKS,M,MCxBxFG,MARf,WACI,OACI,yBAAKpB,UAAU,UACX,uGAAyE,uBAAGS,KAAK,mCAAmCC,OAAO,SAASC,IAAI,uBAA/D,a,MCkBtEU,MAhBf,WACE,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,QAAQC,UAAWZ,IACrC,kBAAC,EAAD,UCPUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e3ffb8d9.chunk.js","sourcesContent":["// src/Components/Title/Title.js\n\nimport React from 'react';\nimport './Title.css';\n\nfunction Title() {\n    return (\n      <div className=\"background\">\n        <header>\n          <title>Fictional Happiness</title>\n          <h1 className=\"Title\">Fictional Happiness</h1>\n          <h3 className=\"Title-Subtitle\">Can you tell a fake smile from a real one?</h3>\n        </header>\n      </div>\n    )\n  }\n\nexport default Title","// src/Components/Home/Home.js\n\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Home.css'\n\nfunction Home() {\n    return (\n        <div className=\"container\">\n            <h3>Click on the React.js logo to play Fictional Happiness!</h3>\n            <Link className=\"a\" to={`/game`} lable=\"game\">\n                <img className=\"logo\" src={`${process.env.PUBLIC_URL}/logo192.png`} width=\"300\" height=\"300\" alt=\"React.js Logo\" />\n            </Link>\n            <p>If it is your first time, this game is inspired by <a href=\"http://www.higherlowergame.com/\" target=\"_blank\" rel='noreferrer noopener'>The Higher Lower Game</a>\n            All you have to do is click on one image or the other if you think it is a <b className=\"bold\">Real Smile</b>. Get as many points as you can. Want more? let me know that you \n            liked it by staring my project on <a href=\"https://github.com/MakeMeSenpai/\" target=\"_blank\" rel='noreferrer noopener'>Github</a></p>\n        </div>\n    );\n}\n\nexport default Home;","// src/Components/Game/Game.js\n\nimport React from 'react';\n// import High from '../High/High';\n// import Score from '../Score/Score';\n// import Time from '../Time/Time';\nimport './Game.css';\n\nfunction Game() {\n    // chooses a random image by id\n    let leftId = Math.floor(Math.random() *10)\n    let rightId = Math.floor(Math.random() * 10);\n\n    // determines which image will be a fake or real smile\n    let fakeOrReal = Math.random();\n    let leftChoice = '';\n    let rightChoice = '';\n    if (fakeOrReal >= 0.5) {\n        leftChoice = 'real';\n        rightChoice = 'fake';\n    } else {\n        leftChoice = 'fake';\n        rightChoice = 'real';\n    };\n\n    return (\n        <div className=\"content\">\n             {/* STRETCH: make img names annonymous */}\n             <img src={`${process.env.PUBLIC_URL}/imgs/${leftId}${leftChoice}.jpg`} width=\"300\" alt={leftId} />\n             {/* placeholders for actual functions High, Score, & Time */}\n             <div className=\"center\">\n                 <div>High-Score: 10</div>\n                 <div>Score: 3</div>\n                 {/* should be optional whether it's a timer\n                 or a counter */}\n                 <div>Time: 5 sec.</div> \n             </div>\n             <img src={`${process.env.PUBLIC_URL}/imgs/${rightId}${rightChoice}.jpg`} width=\"300\" alt={rightId} />\n        </div>\n    );\n}\n\nexport default Game;","// src/footer.js\n\nimport React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <h4> Anthony S. Protho Â©2020 ~ Want to see more of my work? Check out my <a href=\"https://github.com/MakeMeSenpai/\" target=\"_blank\" rel='noreferrer noopener'>Github</a></h4>\n        </div>\n    )\n}\n\nexport default Footer;","// src/Components/App.js\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport React from 'react';\nimport Title from './Title/Title';\nimport Home from './Home/Home';\nimport Game from './Game/Game';\nimport Footer from './Footer/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Router>\n          <Title />\n          {/* exact path necessary for none trailing pages */}\n          <Route exact path=\"/\" component={Home}/>\n          <Route exact path=\"/game\" component={Game} />\n          <Footer />\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}