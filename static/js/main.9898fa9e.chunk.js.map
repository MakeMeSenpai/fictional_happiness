{"version":3,"sources":["Components/Title/Title.js","Components/Home/Home.js","Components/Game/Game.js","Components/Over/Over.js","Components/Footer/Footer.js","Components/App.js","serviceWorker.js","index.js"],"names":["Title","className","Home","to","lable","src","process","width","height","alt","href","target","rel","Game","props","saved","state","count","high","redirect","leftId","rightId","fakeOrReal","leftChoice","rightChoice","setup","this","choice","console","log","localStorage","getItem","setState","Math","floor","random","window","setItem","increment","highScore","setRedirect","renderRedirect","onClick","leftTrueOrFalse","bind","rightTrueOrFalse","Component","Over","Footer","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9898fa9e.chunk.js","sourcesContent":["// src/Components/Title/Title.js\n\nimport React from 'react';\nimport './dist/Title.css';\n\nfunction Title() {\n    return (\n      <div className=\"background\">\n        <header>\n          <title>Fictional Happiness</title>\n          <h1 className=\"Title\">Fictional Happiness</h1>\n          <h3 className=\"Title-Subtitle\">Can you tell a real smile from a fake one?</h3>\n        </header>\n      </div>\n    )\n  }\n\nexport default Title","// src/Components/Home/Home.js\n\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport './dist/Home.css'\n\nfunction Home() {\n    return (\n        <div className=\"container\">\n            <h3>Click the logo to play!</h3>\n            <Link className=\"a\" to={`/game`} lable=\"game\">\n                <img className=\"logo\" src={`${process.env.PUBLIC_URL}/logo.png`} width=\"300\" height=\"300\" alt=\"Logo of Smiling Face\" />\n            </Link>\n            <p>If it is your first time, this game is inspired by <a href=\"http://www.higherlowergame.com/\" target=\"_blank\" rel='noreferrer noopener'>The Higher Lower Game.</a> All\n            you have to do is click on one image or the other if you think it is a <b className=\"bold\">Real Smile</b>. Get as many points as you can. Want more? let me know that you \n            liked it by staring my project on <a href=\"https://github.com/MakeMeSenpai/\" target=\"_blank\" rel='noreferrer noopener'>Github</a></p>\n        </div>\n    );\n}\n\nexport default Home;","// src/Components/Game/Game.js\n\n// a lot is happening in this file so let me explain\n// 1. we import redirect from react-router-dom, hopefully\n//  it works with hash-routes. As well as our styles and React\n// 2. we set up the class, using props in our super class state\n// that extends from compnonent. We try to define everything in\n// this.state formate, and use our setup function to define values\n// 3. choice and fakeOrReal methods are used to choose a random\n// photo for both left and right sides. Then return the saved highscore\n// from the cache\n// 4. we created an incrimentor method to increase the players\n// score\n// 5. we created a highscore method in order to try and save the players\n// highscore in the local cache.\n// 6. we created some methods to create a redirect link in our \n// buttons\n// 7. we check if the answer they choice was correct or not. If \n// correct, we increase their score with the beforementioned method.\n// Then we use our setup function to hopefully select new photo values.\n// if they are wrong, we should be given a error becuase the game\n// /over route does not exist yet.\n// 8. We render() our code into jsx, for the user to see.\n\nimport { Redirect } from 'react-router-dom'\n\nimport React, { Component } from 'react';\n// import Time from '../Time/Time';\nimport './dist/Game.css'\n\nclass Game extends Component {\n    constructor(props) {\n      super(props);\n      this.saved = 0;\n      this.state = { \n        count: 0, \n        high: this.saved,\n        redirect: false,\n        leftId: 0,\n        rightId: 0,\n        fakeOrReal: 0,\n        leftChoice: 'real',\n        rightChoice: 'fake',\n      };\n\n      // setup\n      this.setup();\n    };\n\n    // Chooses our games vars\n    setup() {\n        this.choice();\n        this.fakeOrReal();\n        // retieves our local storage\n        console.log(this.saved)\n        this.saved = localStorage.getItem(this.saved);\n        this.setState({ high: localStorage.getItem(this.saved) });\n    }\n    // // retieves our local storage \n    // const fromLocal = localStorage.getItem(GAME_STORE)\n    // let savedState\n    // if (savedState === null) { // We need this in case nothing was saved\n    //     savedState = { high: 0 }\n    // } else {\n    //     savedState = JSON.parse(fromLocal)\n    // }\n    // this.setState(savedState)\n    // }\n\n    // ID (chooses random img based on ID)\n    choice() {\n        this.setState({ leftId: Math.floor(Math.random() *10) });\n        this.setState({ rightId: Math.floor(Math.random() *10) });\n    }\n\n    // Chooses Fake or Real images\n    fakeOrReal() {\n        this.setState({ fakeOrReal: Math.random() });\n\n        if (this.state.fakeOrReal >= 0.5) {\n            this.setState({ leftChoice: 'real' });\n            this.setState({ rightChoice: 'fake' });\n        } else {\n            this.setState({ leftChoice: 'fake' });\n            this.setState({ rightChoice: 'real' });\n        };\n    }\n\n    // increases our players score\n    increment() {\n        this.setState({ count: this.state.count + 1 });\n    }\n\n    // calculates our players high score\n    highScore() {\n        // checks if score is higher then highscore\n        if (this.state.high <= this.state.count) {\n            // stores our score inside our local storage\n            window.localStorage.setItem(this.saved, this.state.count + 1);\n            // displays new High score\n            this.setState({ high: localStorage.getItem(this.saved) });\n        };\n    }\n    // highScore() {\n    //   // checks if score is higher then highscore\n    //   if (this.state.high <= this.state.count) {\n    //     // stores our score inside our local storage\n    //     localStorage.setItem(GAME_STORE, this.state.count + 1);\n    //     // displays new High score\n    //     this.setState({ high: localStorage.getItem(this.saved) });\n    //   };\n    // }\n\n    // saveState() {\n    //     localStorage.setItem(\"SOME_KEY\", JSON.stringify(this.state))\n    //   }\n    //   getState() {\n    //     let savedState = localStorage.getItem('SOME_KEY')\n    //     if (savedState === null) {\n    //       savedState = { high: 0 }\n    //     }\n    //     this.setState(savedState)\n    // }\n\n    // sets redirect to true\n    setRedirect() {\n        this.setState({\n          redirect: true\n        })\n      }\n\n    // listens to see if redirect is true\n    renderRedirect() {\n        if (this.state.redirect) {\n            return <Redirect to='/over' />\n        }\n    }\n\n    // checks if click was the correct answer\n    leftTrueOrFalse() {\n        \n        if (this.state.leftChoice === 'real') {\n            // updates photos and incriments scores\n            this.increment();\n            this.highScore();\n            this.setup();\n        } else {\n            //sends player to Game Over screen\n            this.setRedirect();\n        }\n    }\n\n    rightTrueOrFalse() {\n        if (this.state.rightChoice === 'real') {\n            // updates photos and incriments scores\n            this.increment();\n            this.highScore();\n            this.setup();\n        } else {\n            //sends player to Game Over screen\n            this.setRedirect();\n        }\n    }\n\n    // uses jsx to create our page\n    render() {\n        return (\n        <div className=\"content\">\n            {/* STRETCH: make img names annonymous\n            to avoid people finding the answers by\n            using inspector */}\n            {/* Left Side! */}\n            {this.renderRedirect()}\n            <button onClick={this.leftTrueOrFalse.bind(this)}>\n                <img src={`${process.env.PUBLIC_URL}/imgs/${this.state.leftId}${this.state.leftChoice}.jpg`}\n                 width=\"450px\" alt={this.state.leftId} />\n            </button>\n\n            {/* Center Content */}\n            <div className=\"center\">\n                {/* <h2>High-Score:</h2>\n                <h3>{this.state.high}</h3> */}\n                <h2>Score:</h2>\n                <h3>{this.state.count}</h3>\n                {/* STRETCH: make a Time function\n                should be optional whether it's a timer\n                or a counter */}\n                {/* <div>Time: 5 sec.</div>  */}\n            </div>\n\n            {/* Right Side! */}\n            {this.renderRedirect()}\n            <button onClick={this.rightTrueOrFalse.bind(this)}>\n                <img src={`${process.env.PUBLIC_URL}/imgs/${this.state.rightId}${this.state.rightChoice}.jpg`}\n                 width=\"450px\" alt={this.state.rightId} />\n            </button>\n        </div>\n        )\n    }\n}\n\nexport default Game;","// src/Components/Over/Over.js\n\nimport React from 'react';\nimport './dist/Over.css'\n\nfunction Over() {\n    return (\n        <div className=\"over\">\n            <h1>Game Over!</h1>\n            <a href=\"game#/game\"><h3>Play Again</h3></a>\n            <a href=\"/\"><h3>Return Home</h3></a>\n        </div>\n    )\n}\n\nexport default Over;","// src/footer.js\n\nimport React from 'react';\nimport './dist/Footer.css';\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <h4> Anthony S. Protho ©2020 ~ Want to see more of my work? Check out my <a href=\"https://github.com/MakeMeSenpai/\" target=\"_blank\" rel='noreferrer noopener'>Github</a></h4>\n        </div>\n    )\n}\n\nexport default Footer;","// src/Components/App.js\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport React from 'react';\nimport Title from './Title/Title';\nimport Home from './Home/Home';\nimport Game from './Game/Game';\nimport Over from './Over/Over';\nimport Footer from './Footer/Footer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Router>\n          <Title />\n          {/* exact path necessary for none trailing pages */}\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/game\" component={Game} />\n          <Route exact path=\"/over\" component={Over} />\n          <Footer />\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}